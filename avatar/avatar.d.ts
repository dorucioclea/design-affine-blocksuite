import { type AvatarFallbackProps, type AvatarImageProps, type AvatarProps as RadixAvatarProps } from '@radix-ui/react-avatar';
import type { CSSProperties, HTMLAttributes, MouseEvent } from 'react';
import { type ReactElement } from 'react';
import { type TooltipProps } from '../tooltip';
export type AvatarProps = {
    size?: number;
    url?: string | null;
    name?: string;
    className?: string;
    style?: CSSProperties;
    colorfulFallback?: boolean;
    hoverIcon?: ReactElement;
    onRemove?: (e: MouseEvent<HTMLButtonElement>) => void;
    avatarTooltipOptions?: Omit<TooltipProps, 'children'>;
    removeTooltipOptions?: Omit<TooltipProps, 'children'>;
    fallbackProps?: AvatarFallbackProps;
    imageProps?: Omit<AvatarImageProps, 'src'>;
    avatarProps?: RadixAvatarProps;
    hoverWrapperProps?: HTMLAttributes<HTMLDivElement>;
    removeButtonProps?: HTMLAttributes<HTMLButtonElement>;
} & HTMLAttributes<HTMLSpanElement>;
export declare const Avatar: import("react").ForwardRefExoticComponent<{
    size?: number | undefined;
    url?: string | null | undefined;
    name?: string | undefined;
    className?: string | undefined;
    style?: CSSProperties | undefined;
    colorfulFallback?: boolean | undefined;
    hoverIcon?: ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    onRemove?: ((e: MouseEvent<HTMLButtonElement>) => void) | undefined;
    avatarTooltipOptions?: Omit<TooltipProps, "children"> | undefined;
    removeTooltipOptions?: Omit<TooltipProps, "children"> | undefined;
    fallbackProps?: AvatarFallbackProps | undefined;
    imageProps?: Omit<AvatarImageProps, "src"> | undefined;
    avatarProps?: RadixAvatarProps | undefined;
    hoverWrapperProps?: HTMLAttributes<HTMLDivElement> | undefined;
    removeButtonProps?: HTMLAttributes<HTMLButtonElement> | undefined;
} & HTMLAttributes<HTMLSpanElement> & import("react").RefAttributes<HTMLSpanElement>>;
